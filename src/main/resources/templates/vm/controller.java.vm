package ${package}.controller.${module};


import ${package}.common.R;
import ${package}.common.Page;

import org.springframework.ui.Model;
import ${package}.entity.user.User;
import ${package}.entity.${module}.${className};
import ${package}.service.${module}.${className}Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import javax.servlet.http.HttpServletRequest;
import java.util.List;
import org.apache.shiro.authz.annotation.RequiresPermissions;

/**
 * @author ${author}
 * @date ${datetime}
 * @company ${company}
 * @description $!{comment}
 */
@Controller
@RequestMapping("/${classNameSmall}")
public class ${className}Controller {

    private static final String PREFIX = "/${module}";

    @Autowired
    ${className}Service ${classNameSmall}Service;

    /**
     * 进入页面
     * @return
     */
    @RequestMapping(value = "", method={ RequestMethod.GET})
    @RequiresPermissions("${module}:${classNameSmall}:list")
    String to${className}Page(){
        return PREFIX + "/${classNameSmall}List";
    }

#if($sidePagination == "server")
    /**
    * 多条件#if($fuzzyLookup)模糊#end 查询并且分页显示
    * @param ${classNameSmall}
    * @param offset
    * @param limit
    * @return
    */
    @RequestMapping(value = "/list")
    @ResponseBody
    @RequiresPermissions("${module}:${classNameSmall}:list")
    public Page list(${className} ${classNameSmall},String offset,String limit) {
        Page page = new Page();
        page.setPageNumber((Integer.valueOf(offset) / (Integer.valueOf(limit))));
        page.setPageSize(Integer.valueOf(limit));
        page = ${classNameSmall}Service.list(${classNameSmall}, page);
        return page;
    }
#else
    /**
     * 多条件#if($fuzzyLookup)模糊#end 查询
     * @param ${classNameSmall}
     * @return
     */
    @RequestMapping(value = "/list")
    @ResponseBody
    @RequiresPermissions("${module}:${classNameSmall}:list")
    public List<${className}> list(${className} ${classNameSmall}) {
#if($fuzzyLookup)
        return ${classNameSmall}Service.listByFuzzy(${classNameSmall});
#else
        return ${classNameSmall}Service.list(${classNameSmall});
#end
    }
#end

    /**
     * 进入新增页面
     * @return
     */
    @RequestMapping(value = "/add", method={ RequestMethod.GET})
    @RequiresPermissions("${module}:${classNameSmall}:add")
    String add(){
        return PREFIX + "/${classNameSmall}Add";
    }

    /**
     * 保存
     * @param ${classNameSmall}
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/save", method={ RequestMethod.POST})
    @RequiresPermissions("${module}:${classNameSmall}:add")
    public R save( ${className} ${classNameSmall},HttpServletRequest request){
        User user = (User)request.getSession().getAttribute("currentUser");
#foreach($column in $columns)
#if($column.attrNameSmall == 'createBy')
        ${classNameSmall}.setCreateBy(user.getWorkcode());
#elseif($column.attrNameSmall == 'updateBy')
        ${classNameSmall}.setUpdateBy(user.getWorkcode());
#end
#end
        if(${classNameSmall}Service.insert(${classNameSmall}) > 0) {
            return R.ok();
        }
        return R.error();
    }

    /**
     * 进入编辑页面
     * @param model
     * @param $pk.attrNameSmall
     * @return
     */
    @RequestMapping(value = "/edit", method={ RequestMethod.GET})
    @RequiresPermissions("${module}:${classNameSmall}:edit")
    String edit(Model model,$pk.attrType $pk.attrNameSmall){
        ${className} $classNameSmall = ${classNameSmall}Service.get($pk.attrNameSmall);
        model.addAttribute("$classNameSmall", $classNameSmall);
        return PREFIX + "/${classNameSmall}Edit";
    }

    /**
     * 修改
     * @param ${classNameSmall}
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/update", method={ RequestMethod.POST})
    @RequiresPermissions("${module}:${classNameSmall}:edit")
    public R update( ${className} ${classNameSmall},HttpServletRequest request){
        User user = (User)request.getSession().getAttribute("currentUser");
#foreach($column in $columns)
#if($column.attrNameSmall == 'updateBy')
        ${classNameSmall}.setUpdateBy(user.getWorkcode());
#end
#end
        if(${classNameSmall}Service.update(${classNameSmall})>0){
            return R.ok();
        }
        return R.error();
    }

    /**
     * 进入查看页面
     * @param model
     * @param $pk.attrNameSmall
     * @return
     */
    @RequestMapping(value = "/view", method={ RequestMethod.GET})
    @RequiresPermissions("${module}:${classNameSmall}:list")
    String view(Model model,$pk.attrType $pk.attrNameSmall){
        ${className} $classNameSmall = ${classNameSmall}Service.get($pk.attrNameSmall);
        model.addAttribute("$classNameSmall", $classNameSmall);
        model.addAttribute("isReadonly", 1);
        return PREFIX + "/${classNameSmall}Edit";
    }

    /**
     * 删除
     * @param $pk.attrNameSmall
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/delete", method={ RequestMethod.POST})
    @RequiresPermissions("${module}:${classNameSmall}:delete")
    public R delete( $pk.attrType $pk.attrNameSmall){
#if($isLogicDelete)
        if(${classNameSmall}Service.deleteLogic($pk.attrNameSmall)>0){
#else
        if(${classNameSmall}Service.delete($pk.attrNameSmall)>0){
#end
            return R.ok();
        }
        return R.error();
    }

#if($batchDelete)
    /**
     * 批量删除
     * @param ${pk.attrNameSmall}s
     * @return
     */
    @RequestMapping(value = "/batchDelete", method={ RequestMethod.POST})
    @ResponseBody
    @RequiresPermissions("${module}:${classNameSmall}:batchDelete")
    public R remove(@RequestParam("ids[]") ${pk.attrType}[] ${pk.attrNameSmall}s){
            ${classNameSmall}Service.batchDelete(${pk.attrNameSmall}s);
        return R.ok();
    }
#end
}
