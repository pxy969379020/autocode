package ${package}.controller.${module};

import java.util.Date;

import ${package}.common.R;
import ${package}.common.Page;

import org.springframework.ui.Model;
import ${package}.entity.user.User;
import ${package}.entity.${module}.${className};
import ${package}.service.${module}.${className}Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;

/**
 * @author ${author}
 * @date ${datetime}
 * @company ${company}
 * @description $!{comment}
 */
@Controller
@RequestMapping("/${classNameSmall}")
public class ${className}Controller {

    private static final String prefix = "/${module}";

    @Autowired
    ${className}Service ${classNameSmall}Service;

    /**
     * 进入页面
     * @return
     */
    @RequestMapping(value = "", method={ RequestMethod.GET})
    String to${className}Page(){
        return prefix + "/${classNameSmall}List";
    }

#if($sidePagination == "server")
    /**
    * 多条件#if($fuzzyLookup)模糊#end 查询并且分页显示
    * @param ${classNameSmall}
    * @param offset
    * @param limit
    * @return
    */
    @RequestMapping(value = "/list")
    @ResponseBody
    public Page list(${className} ${classNameSmall},String offset,String limit) {
        Page page = new Page();
        page.setPageNumber((Integer.valueOf(offset) / (Integer.valueOf(limit))));
        page.setPageSize(Integer.valueOf(limit));
        page = ${classNameSmall}Service.list(${classNameSmall}, page);
        return page;
    }
#else
    /**
     * 多条件#if($fuzzyLookup)模糊#end 查询
     * @param ${classNameSmall}
     * @return
     */
    @RequestMapping(value = "/list")
    @ResponseBody
    public List<${className}> list(${className} ${classNameSmall}) {
#if($fuzzyLookup)
    return ${classNameSmall}Service.listByFuzzy(${classNameSmall});
#else
    return ${classNameSmall}Service.list(${classNameSmall});
#end
    }
#end
    /**
     * 进入查看页面
     * @param model
     * @param $pk.attrNameSmall
     * @return
     */
    @RequestMapping(value = "/view", method={ RequestMethod.GET})
    String view(Model model,$pk.attrType $pk.attrNameSmall){
        ${className} $classNameSmall = ${classNameSmall}Service.get($pk.attrNameSmall);
        model.addAttribute("$classNameSmall", $classNameSmall);
        model.addAttribute("isReadonly", 1);
        return prefix + "/${classNameSmall}Edit";
    }

    /**
     * 进入编辑页面
     * @param model
     * @param $pk.attrNameSmall
     * @return
     */
    @RequestMapping(value = "/edit", method={ RequestMethod.GET})
    String edit(Model model,$pk.attrType $pk.attrNameSmall){
        ${className} $classNameSmall = null;
#if($pk.attrType == "Long" || $pk.attrType == "Integer")
        if($pk.attrNameSmall != null){
#else
        if(StringUtils.isNotBlank($pk.attrNameSmall)){
#end
            $classNameSmall = ${classNameSmall}Service.get($pk.attrNameSmall);
        }
        model.addAttribute("$classNameSmall", $classNameSmall);
        return prefix + "/${classNameSmall}Edit";
    }

    /**
     * 保存
     * @param ${classNameSmall}
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/save", method={ RequestMethod.POST})
    public R save( ${className} ${classNameSmall},HttpServletRequest request){
        User user = (User)request.getSession().getAttribute("currentUser");
        ${classNameSmall}.setUpdateBy(user.getWorkcode());
        ##${classNameSmall}.setUpdateTime(new Date());
#if($pk.attrType == "Long" || $pk.attrType == "Integer")
        if(${classNameSmall}.get${pk.attrName}() != null){
#else
        if(StringUtils.isNotBlank(${classNameSmall}.get${pk.attrName}())){
#end
            if(${classNameSmall}Service.update(${classNameSmall})>0){
                return R.ok();
            }
         }else{
#if($isLogicDelete)
            ${classNameSmall}.setIsDelete(0);
#end
            ${classNameSmall}.setCreateBy(user.getWorkcode());
            ##${classNameSmall}.setCreateTime(new Date());
            if (${classNameSmall}Service.insert(${classNameSmall}) > 0) {
                return R.ok();
            }
        }
        return R.error();
	}

    /**
     * 删除
     * @param $pk.attrNameSmall
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/delete", method={ RequestMethod.POST})
    public R delete( $pk.attrType $pk.attrNameSmall){
#if($isLogicDelete)
        if(${classNameSmall}Service.deleteLogic($pk.attrNameSmall)>0){
#else
        if(${classNameSmall}Service.delete($pk.attrNameSmall)>0){
#end
            return R.ok();
        }
        return R.error();
    }

}
